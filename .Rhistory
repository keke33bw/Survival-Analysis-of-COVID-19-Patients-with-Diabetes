alpha = 0.05
beta = 0.2
theta = 0.37 ## from figure
p = 0.5
D = read.csv("d.csv", header = FALSE)
V = read.csv("v.csv", header = FALSE)
S_D = stepfun(D[,1], c(1, pmin(D[,2], 100) / 100))
S_V = stepfun(V[,1], c(1, pmin(V[,2], 100) / 100))
View(D)
S_D(2)
## marginal survival
S = function(x, p) {
p * S_D(x) + (1 - p) * S_V(x)
}
a = 3
f = 6
prob = 1 - 1 / 6 * (S(f, p) + 4 * S(0.5 * a + f, p) + S(a + f, p))
## total number of samples necessary
n = deaths / prob
deaths = (qnorm(alpha / 2) + qnorm(beta))^2 / (p * (1 - p) * log(theta)^2)
n = deaths / prob
library(tidyverse)
x = read_csv("latestdata.csv",
col_types = cols(.default = col_character(),
chronic_disease = col_character()))
library(tidyverse)
x = read_csv("latestdata.csv",
col_types = cols(.default = col_character(),
chronic_disease = col_character()))
## group outcomes
outcomes = names(table(as.factor(x$outcome)))
dead = outcomes[5:11]
discharged = outcomes[c(1, 12:15, 20, 22:24)]
## create new tibble with time-to-events
data = mutate(x,
admission = ## start time
as.Date(date_admission_hospital, "%d.%m.%Y"),
confirmation = ## potential censoring time
as.Date(date_confirmation, "%d.%m.%Y") - admission,
T = ## follow-up time
## if date_death_discharge is NA,
## fill in with time from admission to confirmation
coalesce(as.Date(date_death_or_discharge, "%d.%m.%Y") - admission,
confirmation),
d_death = ## event indicator for death
as.numeric(outcome %in% dead),
d_discharge = ## event indicator for discharge
as.numeric(outcome %in% discharged),
)
## remove cases with:
## - missing or negative follow-up times
## - unknown outcomes
data = filter(data, T > 0 & !is.na(T) & !is.na(outcome))
View(data)
View(x)
View(data)
?coalesce
mutate(x[1:10,],
admission = ## start time
as.Date(date_admission_hospital, "%d.%m.%Y"),
confirmation = ## potential censoring time
as.Date(date_confirmation, "%d.%m.%Y") - admission,
T = ## follow-up time
## if date_death_discharge is NA,
## fill in with time from admission to confirmation
coalesce(as.Date(date_death_or_discharge, "%d.%m.%Y") - admission,
confirmation),
d_death = ## event indicator for death
as.numeric(outcome %in% dead),
d_discharge = ## event indicator for discharge
as.numeric(outcome %in% discharged),
)%>%select(admission,confirmation,T)
mutate(x[1:50,],
admission = ## start time
as.Date(date_admission_hospital, "%d.%m.%Y"),
confirmation = ## potential censoring time
as.Date(date_confirmation, "%d.%m.%Y") - admission,
T = ## follow-up time
## if date_death_discharge is NA,
## fill in with time from admission to confirmation
coalesce(as.Date(date_death_or_discharge, "%d.%m.%Y") - admission,
confirmation),
d_death = ## event indicator for death
as.numeric(outcome %in% dead),
d_discharge = ## event indicator for discharge
as.numeric(outcome %in% discharged),
)%>%select(admission,confirmation,T)
mutate(x[40:50,],
admission = ## start time
as.Date(date_admission_hospital, "%d.%m.%Y"),
confirmation = ## potential censoring time
as.Date(date_confirmation, "%d.%m.%Y") - admission,
T = ## follow-up time
## if date_death_discharge is NA,
## fill in with time from admission to confirmation
coalesce(as.Date(date_death_or_discharge, "%d.%m.%Y") - admission,
confirmation),
d_death = ## event indicator for death
as.numeric(outcome %in% dead),
d_discharge = ## event indicator for discharge
as.numeric(outcome %in% discharged),
)%>%select(admission,confirmation,T)
View(data)
table(x$chronic_disease)
library(tidyverse)
x = read_csv("latestdata.csv",
col_types = cols(.default = col_character(),
chronic_disease = col_character()))
## group outcomes
outcomes = names(table(as.factor(x$outcome)))
dead = outcomes[5:11]
discharged = outcomes[c(1, 12:15, 20, 22:24)]
## create new tibble with time-to-events
data = mutate(x,
admission = ## start time
as.Date(date_admission_hospital, "%d.%m.%Y"),
confirmation = ## potential censoring time
as.Date(date_confirmation, "%d.%m.%Y") - admission,
T = ## follow-up time
## if date_death_discharge is NA,
## fill in with time from admission to confirmation
coalesce(as.Date(date_death_or_discharge, "%d.%m.%Y") - admission,
confirmation),
d_death = ## event indicator for death
as.numeric(outcome %in% dead),
d_discharge = ## event indicator for discharge
as.numeric(outcome %in% discharged),
diabetes = grepl("diabetes",chronic_disease,ignore.case = TRUE)
)
## remove cases with:
## - missing or negative follow-up times
## - unknown outcomes
data = filter(data, T > 0 & !is.na(T) & !is.na(outcome))
View(x)
View(data)
summary(data$diabetes)
library(tidyverse)
x = read_csv("latestdata.csv",
col_types = cols(.default = col_character(),
chronic_disease = col_character()))
## group outcomes
outcomes = names(table(as.factor(x$outcome)))
dead = outcomes[5:11]
discharged = outcomes[c(1, 12:15, 20, 22:24)]
## create new tibble with time-to-events
data = mutate(x,
admission = ## start time
as.Date(date_admission_hospital, "%d.%m.%Y"),
confirmation = ## potential censoring time
as.Date(date_confirmation, "%d.%m.%Y") - admission,
T = ## follow-up time
## if date_death_discharge is NA,
## fill in with time from admission to confirmation
coalesce(as.Date(date_death_or_discharge, "%d.%m.%Y") - admission,
confirmation),
d_death = ## event indicator for death
as.numeric(outcome %in% dead),
d_discharge = ## event indicator for discharge
as.numeric(outcome %in% discharged),
diabetes = grepl("diabetes",chronic_disease,ignore.case = TRUE),
hypertension = grepl("hypertension","hypertensive",chronic_disease,ignore.case = TRUE)
)
## remove cases with:
## - missing or negative follow-up times
## - unknown outcomes
data = filter(data, T > 0 & !is.na(T) & !is.na(outcome))
View(data)
View(data)
library(tidyverse)
x = read_csv("latestdata.csv",
col_types = cols(.default = col_character(),
chronic_disease = col_character()))
## group outcomes
outcomes = names(table(as.factor(x$outcome)))
dead = outcomes[5:11]
discharged = outcomes[c(1, 12:15, 20, 22:24)]
## create new tibble with time-to-events
data = mutate(x,
admission = ## start time
as.Date(date_admission_hospital, "%d.%m.%Y"),
confirmation = ## potential censoring time
as.Date(date_confirmation, "%d.%m.%Y") - admission,
T = ## follow-up time
## if date_death_discharge is NA,
## fill in with time from admission to confirmation
coalesce(as.Date(date_death_or_discharge, "%d.%m.%Y") - admission,
confirmation),
d_death = ## event indicator for death
as.numeric(outcome %in% dead),
d_discharge = ## event indicator for discharge
as.numeric(outcome %in% discharged),
diabetes = grepl("diabetes",chronic_disease,ignore.case = TRUE),
hypertension = grepl("hypertens",chronic_disease,ignore.case = TRUE)
)
## remove cases with:
## - missing or negative follow-up times
## - unknown outcomes
data = filter(data, T > 0 & !is.na(T) & !is.na(outcome))
View(data)
summary(data$hypertension)
library(survival)
library(tidyverse)
View(data)
summary(data$d_death)
table(data$d_death)
table(data$d_discharge)
table(data$d_discharge,data$d_death)
survdiff(Surv(T, d_death) ~ diabetes, data = data)
plot(survdiff(Surv(T, d_death) ~ diabetes, data = data),xlab = "Days",ylab = "Survival Probability")
plot(survdiff(Surv(T, d_death) ~ diabetes, data = data))
plot(survdiff(Surv(T, d_death) ~ diabetes, data = data), lty = 1 : 2)
View(data)
survdiff(Surv(T, d_death) ~ diabetes, data = data)
library(survival)
library(tidyverse)
library(survMisc)
library(survRM2)
plot(survdiff(Surv(T, d_death) ~ diabetes, data = data), lty = 1:2,)
plot(survdiff(Surv(T, d_death) ~ diabetes, data = data), lty = 1:2,mark.time = TRUE)
plot(survdiff(Surv(T, d_death) ~ diabetes, data = data), lty = 1:2,mark.time = TRUE,
main = "Time to death",
xlab = "Time")
x = read_csv("latestdata.csv",
col_types = cols(.default = col_character(),
chronic_disease = col_character()))
## group outcomes
outcomes = names(table(as.factor(x$outcome)))
dead = outcomes[5:11]
discharged = outcomes[c(1, 12:15, 20, 22:24)]
## create new tibble with time-to-events
data = mutate(x,
admission = ## start time
as.Date(date_admission_hospital, "%d.%m.%Y"),
confirmation = ## potential censoring time
as.Date(date_confirmation, "%d.%m.%Y") - admission,
Time = ## follow-up time
## if date_death_discharge is NA,
## fill in with time from admission to confirmation
coalesce(as.Date(date_death_or_discharge, "%d.%m.%Y") - admission,
confirmation),
d_death = ## event indicator for death
as.numeric(outcome %in% dead),
d_discharge = ## event indicator for discharge
as.numeric(outcome %in% discharged),
diabetes = grepl("diabetes",chronic_disease,ignore.case = TRUE),
hypertension = grepl("hypertens",chronic_disease,ignore.case = TRUE)
)
## remove cases with:
## - missing or negative follow-up times
## - unknown outcomes
data = filter(data, T > 0 & !is.na(T) & !is.na(outcome))
plot(survdiff(Surv(Time, d_death) ~ diabetes, data = data), lty = 1:2,mark.time = TRUE,
main = "Time to death",
xlab = "Time")
library(survival)
library(tidyverse)
library(survMisc)
library(survRM2)
data(burn, package = "KMsurv" )
#Treatment = Z1, Time to straphylocous aureaus infection = T3, Straphylocous aureaus infection indicator = D3
logrank = survdiff(Surv(T3, D3) ~ Z1, data = burn)
logrank
comp(ten(Surv(T3, D3) ~ Z1, data = burn),p = c( 0, 1), q = c( 1, 0))
comp(ten(Surv(T3, D3) ~ Z1, data = burn),p = c( 0, 1), q = c( 1, 0))
plot(survfit(Surv(T3,D3) ~ Z3, data = burn), lty = 1:2, mark.time = TRUE,
main = "Time to infection",
xlab = "Time")
text(0, 0, pos = 4,
paste("p = ", format(1 - pchisq(logrank$chisq, 1), scientific = TRUE),
sep = ""))
legend("topright", legend = c("Group 0", "Group 1"), lty = 1:2, bty = "n")
survfit(Surv(T3,D3) ~ Z3, data = burn)
plot(survfit(Surv(Time, d_death) ~ diabetes, data = data), lty = 1:2,mark.time = TRUE,
main = "Time to death",
xlab = "Time")
plot(survfit(Surv(T3,D3) ~ Z3, data = burn), lty = 1:2, mark.time = TRUE,
main = "Time to infection",
xlab = "Time")
text(0, 0, pos = 4,
paste("p = ", format(1 - pchisq(logrank$chisq, 1), scientific = TRUE),
sep = ""))
legend("topright", legend = c("Group 0", "Group 1"), lty = 1:2, bty = "n")
Surv(T, d)
?survfit
survfit(Surv(Time, d_death) ~ diabetes
survfit(Surv(Time, d_death) ~ diabetes, data = data)
View(data)
View(data)
x = read_csv("latestdata.csv",
col_types = cols(.default = col_character(),
chronic_disease = col_character()))
## group outcomes
outcomes = names(table(as.factor(x$outcome)))
dead = outcomes[5:11]
discharged = outcomes[c(1, 12:15, 20, 22:24)]
## create new tibble with time-to-events
data = mutate(x,
admission = ## start time
as.Date(date_admission_hospital, "%d.%m.%Y"),
confirmation = ## potential censoring time
as.Date(date_confirmation, "%d.%m.%Y") - admission,
Time = ## follow-up time
## if date_death_discharge is NA,
## fill in with time from admission to confirmation
coalesce(as.Date(date_death_or_discharge, "%d.%m.%Y") - admission,
confirmation),
d_death = ## event indicator for death
as.numeric(outcome %in% dead),
d_discharge = ## event indicator for discharge
as.numeric(outcome %in% discharged),
diabetes = grepl("diabetes",chronic_disease,ignore.case = TRUE),
hypertension = grepl("hypertens",chronic_disease,ignore.case = TRUE)
)
## remove cases with:
## - missing or negative follow-up times
## - unknown outcomes
data = filter(data, T > 0 & !is.na(T) & !is.na(outcome))
x = read_csv("latestdata.csv",
col_types = cols(.default = col_character(),
chronic_disease = col_character()))
## group outcomes
outcomes = names(table(as.factor(x$outcome)))
dead = outcomes[5:11]
discharged = outcomes[c(1, 12:15, 20, 22:24)]
## create new tibble with time-to-events
data = mutate(x,
admission = ## start time
as.Date(date_admission_hospital, "%d.%m.%Y"),
confirmation = ## potential censoring time
as.Date(date_confirmation, "%d.%m.%Y") - admission,
Time = ## follow-up time
## if date_death_discharge is NA,
## fill in with time from admission to confirmation
coalesce(as.Date(date_death_or_discharge, "%d.%m.%Y") - admission,
confirmation),
d_death = ## event indicator for death
as.numeric(outcome %in% dead),
d_discharge = ## event indicator for discharge
as.numeric(outcome %in% discharged),
diabetes = grepl("diabetes",chronic_disease,ignore.case = TRUE),
hypertension = grepl("hypertens",chronic_disease,ignore.case = TRUE)
)
## remove cases with:
## - missing or negative follow-up times
## - unknown outcomes
data = filter(data, Time > 0 & !is.na(Time) & !is.na(outcome))
survfit(Surv(Time, d_death) ~ diabetes, data = data)
plot(survfit(Surv(Time, d_death) ~ diabetes, data = data), lty = 1:2,mark.time = TRUE,
main = "Time to death",
xlab = "Time(Days)")
legend("topright", legend = c("without diabetes", "with diabetes"), lty = 1:2, bty = "n")
km = survfit(Surv(t2, d3) ~ group, data = bmt)
plot(km, lty = 1:3,
mark.time = TRUE,
main = "Disease-free survival", xlab = "Time (days)",
ylab = "Probability")
legend("topright", c("ALL", "AML low-risk", "AML high-risk"),
lty = 1:3, bty = "n")
data(bmt, package = "KMsurv")
## kaplan-meier
km = survfit(Surv(t2, d3) ~ group, data = bmt)
plot(km, lty = 1:3,
mark.time = TRUE,
main = "Disease-free survival", xlab = "Time (days)",
ylab = "Probability")
legend("topright", c("ALL", "AML low-risk", "AML high-risk"),
lty = 1:3, bty = "n")
View(km)
View(data)
table(data$d_death,data$diabetes)
survfit(Surv(Time, d_death) ~ diabetes, data = data)
km_diabetes = survfit(Surv(Time, d_death) ~ diabetes, data = data)
plot(km_diabetes, lty = 1:2,mark.time = TRUE,
main = "Time to death",
xlab = "Time(Days)")
legend("topright", legend = c("without diabetes", "with diabetes"), lty = 1:2, bty = "n")
km_diabetes
km_diabetes$n.risk
km_diabetes$n.event
km_diabetes$time
km_diabetes$type
tmp = bmt[bmt$group != 1, ]
tmp$group = as.numeric(tmp$group == 2)
library(survRM2)
with(tmp, rmst2(t2, d3, group, tau = 1000))
set.seed(1)
X1 = rexp(100)
X0 = rexp(100, 2)
C1 = rexp(100)
C0 = rexp(100, 2)
T1 = pmin(X1, C1)
T0 = pmin(X0, C0)
d1 = as.numeric(X1 <= C1)
d0 = as.numeric(X0 <= C0)
data = data.frame(T = c(T1, T0),
d = c(d1, d0),
Z = c(rep(1,100), rep(0,100)))
## calculate test statistic and p-value
logrank = survdiff(Surv(T, d) ~ Z, data = data)
logrank
## plot results
plot(survfit(Surv(T,d) ~ Z, data = data), lty = 1:2, mark.time = TRUE,
main = "Proportional hazards",
xlab = "Time", ylab = "Probability")
text(0, 0, pos = 4,
paste("p = ", format(1 - pchisq(logrank$chisq, 1), scientific = TRUE),
sep = ""))
legend("topright", legend = c("Group 0", "Group 1"), lty = 1:2, bty = "n")
x = read_csv("latestdata.csv",
col_types = cols(.default = col_character(),
chronic_disease = col_character()))
## group outcomes
outcomes = names(table(as.factor(x$outcome)))
dead = outcomes[5:11]
discharged = outcomes[c(1, 12:15, 20, 22:24)]
## create new tibble with time-to-events
data = mutate(x,
admission = ## start time
as.Date(date_admission_hospital, "%d.%m.%Y"),
confirmation = ## potential censoring time
as.Date(date_confirmation, "%d.%m.%Y") - admission,
Time = ## follow-up time
## if date_death_discharge is NA,
## fill in with time from admission to confirmation
coalesce(as.Date(date_death_or_discharge, "%d.%m.%Y") - admission,
confirmation),
d_death = ## event indicator for death
as.numeric(outcome %in% dead),
d_discharge = ## event indicator for discharge
as.numeric(outcome %in% discharged),
diabetes = grepl("diabetes",chronic_disease,ignore.case = TRUE),
hypertension = grepl("hypertens",chronic_disease,ignore.case = TRUE)
)
## remove cases with:
## - missing or negative follow-up times
## - unknown outcomes
data = filter(data, Time > 0 & !is.na(Time) & !is.na(outcome))
km_diabetes = survfit(Surv(Time, d_death) ~ diabetes, data = data)
plot(km_diabetes, lty = 1:2,mark.time = TRUE,
main = "Time to death",
xlab = "Time(Days)")
legend("topright", legend = c("without diabetes", "with diabetes"), lty = 1:2, bty = "n")
summary(km_diabetes)
km_diabetes = survfit(Surv(Time, d_death) ~ diabetes, data = data)
plot(km_diabetes, lty = 1:2,mark.time = TRUE,
main = "Time to death",
xlab = "Time(Days)")
legend("topright", legend = c("without diabetes", "with diabetes"), lty = 1:2, bty = "n")
